import numpy as np 


class PostureMapping: 
    def __init__(self) -> None:
        # For saving Current Angle
        # and initiating angle positions
        angle_1 = 40
        angle_2 = 0
        self.angle_1 = angle_1
        self.angle_2 = angle_2

        # Mapping Customizing
        self.optimum_shoulder_to_head = 70   # Set optimum angle for the mapping         
        self.activated = False # Flag to indicate if PostureMapping is started
        
        
        # Large mapping
        self.count1 = 0  # Count the number of stable position 
        self.classifier1 = 30  #(angle)
        self.large_mapping_rate = 0.5 # How much angle to change at once. 0.5 = 50% change
        
        # Small mapping
        self.count2 = 0  # Count the number of stable position 
        self.classifier2 = 10  #(angle) 
        self.small_mapping_rate = 0.3 
    
        self.count_threshold = 30 # Threshold for count



    def Iterator(self, shoulder_to_head):
        
        # Compute loss
        # Change the the loss function if needed: squared 
        loss = shoulder_to_head - self.optimum_shoulder_to_head

        # Classifying type of mapping(lage/small scale) by the shoulder_to_head angle 
        # Mapping in Large Scale
        if np.abs(loss) >= self.classifier1 \
            and self.count1 <= self.count_threshold:
            
            del_angle_2 = - self.large_mapping_rate * np.sign(loss)
            self.angle_2 += del_angle_2
            
            print("Mapping in large scale:")
            return self.angle_1, self.angle_1 + self.angle_2
            
        # Detecting the correct posture in Large Scale
        if np.abs(loss) <= self.classifier1 :
            self.count1 += 1
        
        # Mapping in Small Scale
        elif self.count1 >= self.count_threshold \
            and self.count2 <= self.count_threshold:
                
            del_angle_1 = - self.small_mapping_rate * np.sign(loss)
            self.angle_1 += del_angle_1
            self.angle_2 -= del_angle_1
            
            print("Mapping in small scale:")
            return self.angle_1, self.angle_1 + self.angle_2
            
        # Detecting the correct posture in Small Scale
        if np.abs(loss) <= self.classifier2 :
            self.count2 += 1

        else: 
            self.count1 = 0
            self.count2 = 0
            print(f"Now in correct posture! The angle is {shoulder_to_head}.")
            self.activated = False
            return self.angle_1, self.angle_1 + self.angle_2
            

    



